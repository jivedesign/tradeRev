{"ast":null,"code":"var _jsxFileName = \"/Users/joshnguyen/Documents/Development/tradeRev/traderev/src/components/grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useImageHook from '../hooks/imageHook';\nimport ImageTile from './imageTile';\nimport { getImages } from '../Api';\nimport FullscreenImage from './fullscreenImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledGridContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n`;\n_c = StyledGridContainer;\nconst StyledGrid = styled.div`\nwidth: 100%;\n@media screen and (min-width: 1000px) {\n  width: 1200px;\n  margin: 0 auto;\n}\n`;\n_c2 = StyledGrid;\nconst LoadingComponent = styled.div`\n  font-weight: bold;\n  font-size: 50px;\n  margin: 100px;\n`;\n_c3 = LoadingComponent;\n\nconst Grid = () => {\n  _s();\n\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showFullscreen, setShowFullscreen] = useState(false);\n  const [fullscreenImageObject, setFullscreenImageObject] = useState();\n  const [fullscreenImageIndex, setFullscreenImageIndex] = useState();\n  const {\n    init,\n    imageObjects,\n    getImageObjects,\n    getNextImageObject,\n    getPrevImageObject\n  } = useImageHook();\n  useEffect(() => {\n    if (hasInitialized && imageObjects.length) {\n      setImages(imageObjects);\n      setIsLoading(false);\n    }\n\n    ;\n  }, [hasInitialized, imageObjects]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      setIsLoading(true);\n      init();\n      setHasInitialized(true);\n    }\n  }, [hasInitialized]);\n\n  const handleGetImages = async () => {\n    const newImages = await getImages(currentPage);\n    console.log('-- IMAGES;', images);\n    setImages(images.concat(newImages));\n  };\n\n  const handleScroll = e => {\n    const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n    console.log('- SCR');\n\n    if (bottom) {\n      // handleGetImages\n      console.log('- BTTOm');\n    }\n  };\n\n  const handleShowFullscreenImage = (imageObj, index) => {\n    setFullscreenImageIndex(index);\n    setFullscreenImageObject(imageObj);\n    setShowFullscreen(true);\n  };\n\n  const handleShowNextFullscreenImage = async () => {\n    const nextImageIndex = fullscreenImageIndex + 1;\n    setFullscreenImageIndex(nextImageIndex);\n    const nextImage = getNextImageObject(nextImageIndex);\n    await setFullscreenImageObject(nextImage);\n    setShowFullscreen(true);\n  };\n\n  const handleShowPrevFullscreenImage = async () => {\n    const prevImageIndex = fullscreenImageIndex - 1;\n    setFullscreenImageIndex(prevImageIndex);\n    const prevImage = getPrevImageObject(prevImageIndex);\n    await setFullscreenImageObject(prevImage);\n    setShowFullscreen(true);\n  };\n\n  const handleCloseFullscreenImage = () => {\n    setFullscreenImageObject(null);\n    setFullscreenImageIndex(null);\n    setShowFullscreen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledGridContainer, {\n    onScroll: handleScroll,\n    children: [/*#__PURE__*/_jsxDEV(StyledGrid, {\n      children: images.map((image, index) => /*#__PURE__*/_jsxDEV(ImageTile, {\n        index: index,\n        imageData: image,\n        onClick: handleShowFullscreenImage\n      }, image.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 39\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingComponent, {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }, this), showFullscreen && /*#__PURE__*/_jsxDEV(FullscreenImage, {\n      imageData: fullscreenImageObject,\n      onClose: handleCloseFullscreenImage,\n      onNextClick: handleShowNextFullscreenImage,\n      onPrevClick: handleShowPrevFullscreenImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Grid, \"McRdIsl9n+9H6PSx/Fa6PkdzGmM=\", false, function () {\n  return [useImageHook];\n});\n\n_c4 = Grid;\nexport default Grid;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledGridContainer\");\n$RefreshReg$(_c2, \"StyledGrid\");\n$RefreshReg$(_c3, \"LoadingComponent\");\n$RefreshReg$(_c4, \"Grid\");","map":{"version":3,"sources":["/Users/joshnguyen/Documents/Development/tradeRev/traderev/src/components/grid.jsx"],"names":["React","useEffect","useState","styled","useImageHook","ImageTile","getImages","FullscreenImage","StyledGridContainer","div","StyledGrid","LoadingComponent","Grid","images","setImages","currentPage","setCurrentPage","hasInitialized","setHasInitialized","isLoading","setIsLoading","showFullscreen","setShowFullscreen","fullscreenImageObject","setFullscreenImageObject","fullscreenImageIndex","setFullscreenImageIndex","init","imageObjects","getImageObjects","getNextImageObject","getPrevImageObject","length","handleGetImages","newImages","console","log","concat","handleScroll","e","bottom","target","scrollHeight","scrollTop","clientHeight","handleShowFullscreenImage","imageObj","index","handleShowNextFullscreenImage","nextImageIndex","nextImage","handleShowPrevFullscreenImage","prevImageIndex","prevImage","handleCloseFullscreenImage","map","image","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useImageHook from '../hooks/imageHook';\nimport ImageTile from './imageTile';\nimport {getImages} from '../Api';\nimport FullscreenImage from './fullscreenImage';\n\nconst StyledGridContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n`;\n\nconst StyledGrid = styled.div`\nwidth: 100%;\n@media screen and (min-width: 1000px) {\n  width: 1200px;\n  margin: 0 auto;\n}\n`;\n\nconst LoadingComponent = styled.div`\n  font-weight: bold;\n  font-size: 50px;\n  margin: 100px;\n`;\n\nconst Grid = () => {\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showFullscreen, setShowFullscreen] = useState(false);\n  const [fullscreenImageObject, setFullscreenImageObject] = useState();\n  const [fullscreenImageIndex, setFullscreenImageIndex] = useState();\n\n  const { init, imageObjects, getImageObjects, getNextImageObject, getPrevImageObject } = useImageHook();\n\n  useEffect(() => {\n    if (hasInitialized && imageObjects.length) {\n      setImages(imageObjects);\n      setIsLoading(false);\n    };\n  }, [hasInitialized, imageObjects]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      setIsLoading(true);\n\n      init();\n      setHasInitialized(true);\n    }\n  }, [hasInitialized]);\n\n\n  const handleGetImages = async () => {\n    const newImages = await getImages(currentPage);\n    console.log('-- IMAGES;', images)\n    setImages(images.concat(newImages));\n  }\n\n  const handleScroll = (e) => {\n    const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n    console.log('- SCR');\n    if (bottom) {\n      // handleGetImages\n      console.log('- BTTOm');\n    }\n  }\n\n  const handleShowFullscreenImage = (imageObj, index) => {\n    setFullscreenImageIndex(index);\n    setFullscreenImageObject(imageObj);\n    setShowFullscreen(true);\n  }\n\n  const handleShowNextFullscreenImage = async () => {\n    const nextImageIndex = fullscreenImageIndex + 1;\n    setFullscreenImageIndex(nextImageIndex);\n\n    const nextImage = getNextImageObject(nextImageIndex);\n    \n    await setFullscreenImageObject(nextImage);\n    setShowFullscreen(true);\n  }\n\n  const handleShowPrevFullscreenImage = async () => {\n    const prevImageIndex = fullscreenImageIndex - 1;\n    setFullscreenImageIndex(prevImageIndex);\n\n    const prevImage = getPrevImageObject(prevImageIndex);\n    \n    await setFullscreenImageObject(prevImage);\n    setShowFullscreen(true);\n  }\n\n  const handleCloseFullscreenImage = () => {\n    setFullscreenImageObject(null);\n    setFullscreenImageIndex(null);\n    setShowFullscreen(false);\n  }\n\n  return (\n    <StyledGridContainer onScroll={handleScroll}>\n      <StyledGrid>\n        {images.map((image, index) => <ImageTile key={image.id} index={index} imageData={image} onClick={handleShowFullscreenImage} />)}\n      </StyledGrid>\n      {isLoading && <LoadingComponent>loading...</LoadingComponent>}\n      {(showFullscreen) && (\n        <FullscreenImage \n          imageData={fullscreenImageObject}\n          onClose={handleCloseFullscreenImage}\n          onNextClick={handleShowNextFullscreenImage}\n          onPrevClick={handleShowPrevFullscreenImage}\n        />)\n      }\n    </StyledGridContainer>\n  )\n\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}