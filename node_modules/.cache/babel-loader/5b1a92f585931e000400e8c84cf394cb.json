{"ast":null,"code":"var _jsxFileName = \"/Users/joshnguyen/Documents/Development/tradeRev/traderev/src/components/grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport useImageHook from '../hooks/imageHook';\nimport ImageTile from './imageTile';\nimport { getImages } from '../Api';\nimport FullscreenImage from './fullscreenImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledGridContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n  overflow: scroll;\n`;\n_c = StyledGridContainer;\nconst StyledGrid = styled.div`\nwidth: 100%;\n@media screen and (min-width: 1000px) {\n  width: 1200px;\n  margin: 0 auto;\n}\n`;\n_c2 = StyledGrid;\nconst LoadingComponent = styled.div`\n  font-weight: bold;\n  font-size: 50px;\n  margin: 100px;\n`;\n_c3 = LoadingComponent;\n\nconst Grid = () => {\n  _s();\n\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showFullscreen, setShowFullscreen] = useState(false);\n  const [fullscreenImageObject, setFullscreenImageObject] = useState(null);\n  const [fullscreenImageIndex, setFullscreenImageIndex] = useState(null);\n  const listInnerRef = useRef();\n  const {\n    init,\n    imageObjects,\n    getImageObjects,\n    getNextImageObject,\n    getPrevImageObject\n  } = useImageHook();\n  useEffect(() => {\n    if (hasInitialized && (imageObjects === null || imageObjects === void 0 ? void 0 : imageObjects.length)) {\n      setImages(imageObjects);\n      setIsLoading(false);\n    }\n\n    ;\n  }, [hasInitialized, imageObjects]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      setIsLoading(true);\n      init();\n      setHasInitialized(true);\n    }\n  }, [hasInitialized]);\n\n  const handleScroll = () => {\n    if (listInnerRef.current) {\n      const {\n        scrollTop,\n        scrollHeight,\n        clientHeight\n      } = listInnerRef.current;\n\n      if (scrollTop + clientHeight === scrollHeight) {\n        // TO SOMETHING HERE\n        console.log('Reached bottom');\n        handleGetImages();\n      }\n    }\n  };\n\n  const handleGetImages = async () => {\n    const newImages = await getImages(currentPage);\n    console.log('-- IMAGES;', newImages);\n    setImages(images.concat(newImages));\n  };\n\n  const handleShowFullscreenImage = (imageObj, index) => {\n    setFullscreenImageIndex(index);\n    setFullscreenImageObject(imageObj);\n    setShowFullscreen(true);\n  };\n\n  const handleShowNextFullscreenImage = useCallback(() => {\n    const nextImageIndex = fullscreenImageIndex + 1;\n    setFullscreenImageIndex(nextImageIndex); // const nextImage = getNextImageObject(nextImageIndex);\n\n    setFullscreenImageObject(images[nextImageIndex]);\n    setShowFullscreen(true);\n  }, [setFullscreenImageObject, setShowFullscreen, fullscreenImageIndex]);\n  const handleShowPrevFullscreenImage = useCallback(() => {\n    const prevImageIndex = fullscreenImageIndex - 1;\n    setFullscreenImageIndex(prevImageIndex);\n    const prevImage = getPrevImageObject(prevImageIndex);\n    setFullscreenImageObject(prevImage);\n    setShowFullscreen(true);\n  }, [getNextImageObject, setFullscreenImageObject, setShowFullscreen, fullscreenImageIndex]);\n  const handleCloseFullscreenImage = useCallback(() => {\n    setFullscreenImageObject(null);\n    setFullscreenImageIndex(null);\n    setShowFullscreen(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(StyledGridContainer, {\n    ref: listInnerRef,\n    onScroll: () => handleScroll(),\n    children: [/*#__PURE__*/_jsxDEV(StyledGrid, {\n      children: images.map((image, index) => /*#__PURE__*/_jsxDEV(ImageTile, {\n        index: index,\n        imageData: image,\n        onClick: handleShowFullscreenImage\n      }, image.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 39\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingComponent, {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }, this), showFullscreen && /*#__PURE__*/_jsxDEV(FullscreenImage, {\n      imageObjects: images,\n      currentImageIndex: fullscreenImageIndex,\n      imageData: fullscreenImageObject,\n      onCloseClick: handleCloseFullscreenImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Grid, \"Iio5/2rq27oQtJHTqWa1hsIV7cs=\", false, function () {\n  return [useImageHook];\n});\n\n_c4 = Grid;\nexport default Grid;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledGridContainer\");\n$RefreshReg$(_c2, \"StyledGrid\");\n$RefreshReg$(_c3, \"LoadingComponent\");\n$RefreshReg$(_c4, \"Grid\");","map":{"version":3,"sources":["/Users/joshnguyen/Documents/Development/tradeRev/traderev/src/components/grid.jsx"],"names":["React","useRef","useEffect","useState","useCallback","styled","useImageHook","ImageTile","getImages","FullscreenImage","StyledGridContainer","div","StyledGrid","LoadingComponent","Grid","images","setImages","currentPage","setCurrentPage","hasInitialized","setHasInitialized","isLoading","setIsLoading","showFullscreen","setShowFullscreen","fullscreenImageObject","setFullscreenImageObject","fullscreenImageIndex","setFullscreenImageIndex","listInnerRef","init","imageObjects","getImageObjects","getNextImageObject","getPrevImageObject","length","handleScroll","current","scrollTop","scrollHeight","clientHeight","console","log","handleGetImages","newImages","concat","handleShowFullscreenImage","imageObj","index","handleShowNextFullscreenImage","nextImageIndex","handleShowPrevFullscreenImage","prevImageIndex","prevImage","handleCloseFullscreenImage","map","image","id"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport useImageHook from '../hooks/imageHook';\nimport ImageTile from './imageTile';\nimport {getImages} from '../Api';\nimport FullscreenImage from './fullscreenImage';\n\nconst StyledGridContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n  overflow: scroll;\n`;\n\nconst StyledGrid = styled.div`\nwidth: 100%;\n@media screen and (min-width: 1000px) {\n  width: 1200px;\n  margin: 0 auto;\n}\n`;\n\nconst LoadingComponent = styled.div`\n  font-weight: bold;\n  font-size: 50px;\n  margin: 100px;\n`;\n\nconst Grid = () => {\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showFullscreen, setShowFullscreen] = useState(false);\n  const [fullscreenImageObject, setFullscreenImageObject] = useState(null);\n  const [fullscreenImageIndex, setFullscreenImageIndex] = useState(null);\n\n  const listInnerRef = useRef();\n\n  const { init, imageObjects, getImageObjects, getNextImageObject, getPrevImageObject } = useImageHook();\n\n  useEffect(() => {\n    if (hasInitialized && imageObjects?.length) {\n      setImages(imageObjects);\n      setIsLoading(false);\n    };\n  }, [hasInitialized, imageObjects]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      setIsLoading(true);\n\n      init();\n      setHasInitialized(true);\n    }\n  }, [hasInitialized]);\n\n  const handleScroll = () => {\n    if (listInnerRef.current) {\n      const { scrollTop, scrollHeight, clientHeight } = listInnerRef.current;\n      if (scrollTop + clientHeight === scrollHeight) {\n        // TO SOMETHING HERE\n        console.log('Reached bottom')\n        handleGetImages();\n      }\n    }\n  }\n\n  const handleGetImages = async () => {\n    const newImages = await getImages(currentPage);\n    console.log('-- IMAGES;', newImages)\n    setImages(images.concat(newImages));\n  }\n\n  const handleShowFullscreenImage = (imageObj, index) => {\n    setFullscreenImageIndex(index);\n    setFullscreenImageObject(imageObj);\n    setShowFullscreen(true);\n  }\n\n  const handleShowNextFullscreenImage = useCallback(() => {\n    const nextImageIndex = fullscreenImageIndex + 1;\n    setFullscreenImageIndex(nextImageIndex);\n\n    // const nextImage = getNextImageObject(nextImageIndex);\n    \n    setFullscreenImageObject(images[nextImageIndex]);\n    setShowFullscreen(true);\n  }, [setFullscreenImageObject, setShowFullscreen, fullscreenImageIndex])\n\n  const handleShowPrevFullscreenImage = useCallback(() => {\n    const prevImageIndex = fullscreenImageIndex - 1;\n    setFullscreenImageIndex(prevImageIndex);\n\n    const prevImage = getPrevImageObject(prevImageIndex);\n    \n    setFullscreenImageObject(prevImage);\n    setShowFullscreen(true);\n  }, [getNextImageObject, setFullscreenImageObject, setShowFullscreen, fullscreenImageIndex])\n\n  const handleCloseFullscreenImage = useCallback(() => {\n    setFullscreenImageObject(null);\n    setFullscreenImageIndex(null);\n    setShowFullscreen(false);\n  }, []);\n\n  return (\n    <StyledGridContainer ref={listInnerRef} onScroll={() => handleScroll()}>\n      <StyledGrid>\n        {images.map((image, index) => <ImageTile key={image.id} index={index} imageData={image} onClick={handleShowFullscreenImage} />)}\n      </StyledGrid>\n      {isLoading && <LoadingComponent>loading...</LoadingComponent>}\n      {showFullscreen && (\n        <FullscreenImage\n          imageObjects={images}\n          currentImageIndex={fullscreenImageIndex}\n          imageData={fullscreenImageObject}\n          onCloseClick={handleCloseFullscreenImage}\n        />)\n      }\n    </StyledGridContainer>\n  )\n\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}