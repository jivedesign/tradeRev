{"ast":null,"code":"var _jsxFileName = \"/Users/joshnguyen/Documents/Development/tradeRev/traderev/src/components/grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useImageHook from '../hooks/imageHook';\nimport ImageTile from './imageTile';\nimport { getImages } from '../Api';\nimport FullscreenImage from './fullscreenImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledGrid = styled.div`\n  border: 1px dashed red;\n  width: 100vw;\n  height: 100vh;\n  background: lightgray;\n`;\n_c = StyledGrid;\n\nconst Grid = () => {\n  _s();\n\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showFullscreen, setShowFullscreen] = useState(false);\n  const {\n    init,\n    imageObjects,\n    getImageObjects\n  } = useImageHook();\n  useEffect(() => {\n    if (hasInitialized && imageObjects.length) setImages(imageObjects);\n  }, [hasInitialized, imageObjects]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      init();\n      setHasInitialized(true);\n    }\n  }, [hasInitialized]);\n\n  const handleGetImages = async () => {\n    const newImages = await getImages(currentPage);\n    console.log('-- IMAGES;', images);\n    setImages(images.concat(newImages));\n  };\n\n  const handleShowFullscreenImage = imageObj => {\n    setShowFullscreen(true);\n  };\n\n  const handleCloseFullscreenImage = () => {\n    setShowFullscreen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledGrid, {\n      children: images.map(image => /*#__PURE__*/_jsxDEV(ImageTile, {\n        imageData: image,\n        onClick: handleCloseFullscreenImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FullscreenImage, {\n      imageData: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Grid, \"1NZUDjAcugLuj6pfgOFgX5JPBtY=\", false, function () {\n  return [useImageHook];\n});\n\n_c2 = Grid;\nexport default Grid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledGrid\");\n$RefreshReg$(_c2, \"Grid\");","map":{"version":3,"sources":["/Users/joshnguyen/Documents/Development/tradeRev/traderev/src/components/grid.jsx"],"names":["React","useEffect","useState","styled","useImageHook","ImageTile","getImages","FullscreenImage","StyledGrid","div","Grid","images","setImages","currentPage","setCurrentPage","hasInitialized","setHasInitialized","showFullscreen","setShowFullscreen","init","imageObjects","getImageObjects","length","handleGetImages","newImages","console","log","concat","handleShowFullscreenImage","imageObj","handleCloseFullscreenImage","map","image"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAAQC,SAAR,QAAwB,QAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;;AAEA,MAAMC,UAAU,GAAGL,MAAM,CAACM,GAAI;AAC9B;AACA;AACA;AACA;AACA,CALA;KAAMD,U;;AAON,MAAME,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACa,cAAD,EAAiBC,iBAAjB,IAAsCd,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACe,cAAD,EAAiBC,iBAAjB,IAAsChB,QAAQ,CAAC,KAAD,CAApD;AAEA,QAAM;AAAEiB,IAAAA,IAAF;AAAQC,IAAAA,YAAR;AAAsBC,IAAAA;AAAtB,MAA0CjB,YAAY,EAA5D;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,cAAc,IAAIK,YAAY,CAACE,MAAnC,EAA2CV,SAAS,CAACQ,YAAD,CAAT;AAC5C,GAFQ,EAEN,CAACL,cAAD,EAAiBK,YAAjB,CAFM,CAAT;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACc,cAAL,EAAqB;AACnBI,MAAAA,IAAI;AACJH,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD;AACF,GALQ,EAKN,CAACD,cAAD,CALM,CAAT;;AAQA,QAAMQ,eAAe,GAAG,YAAY;AAClC,UAAMC,SAAS,GAAG,MAAMlB,SAAS,CAACO,WAAD,CAAjC;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0Bf,MAA1B;AACAC,IAAAA,SAAS,CAACD,MAAM,CAACgB,MAAP,CAAcH,SAAd,CAAD,CAAT;AACD,GAJD;;AAMA,QAAMI,yBAAyB,GAAIC,QAAD,IAAc;AAC9CX,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAFD;;AAIA,QAAMY,0BAA0B,GAAG,MAAM;AACvCZ,IAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE,QAAC,UAAD;AAAA,gBACGP,MAAM,CAACoB,GAAP,CAAWC,KAAK,iBAAI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAEA,KAAtB;AAA6B,QAAA,OAAO,EAAEF;AAAtC;AAAA;AAAA;AAAA;AAAA,cAApB;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,eAAD;AAAiB,MAAA,SAAS,EAAEE;AAA5B;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AASD,CA3CD;;GAAMtB,I;UAM4CN,Y;;;MAN5CM,I;AA6CN,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useImageHook from '../hooks/imageHook';\nimport ImageTile from './imageTile';\nimport {getImages} from '../Api';\nimport FullscreenImage from './fullscreenImage';\n\nconst StyledGrid = styled.div`\n  border: 1px dashed red;\n  width: 100vw;\n  height: 100vh;\n  background: lightgray;\n`;\n\nconst Grid = () => {\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showFullscreen, setShowFullscreen] = useState(false);\n\n  const { init, imageObjects, getImageObjects } = useImageHook();\n\n  useEffect(() => {\n    if (hasInitialized && imageObjects.length) setImages(imageObjects);\n  }, [hasInitialized, imageObjects]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      init();\n      setHasInitialized(true);\n    }\n  }, [hasInitialized]);\n\n\n  const handleGetImages = async () => {\n    const newImages = await getImages(currentPage);\n    console.log('-- IMAGES;', images)\n    setImages(images.concat(newImages));\n  }\n\n  const handleShowFullscreenImage = (imageObj) => {\n    setShowFullscreen(true);\n  }\n\n  const handleCloseFullscreenImage = () => {\n    setShowFullscreen(false);\n  }\n\n  return (\n    <>\n      <StyledGrid>\n        {images.map(image => <ImageTile imageData={image} onClick={handleCloseFullscreenImage} />)}\n      </StyledGrid>\n      <FullscreenImage imageData={image} />\n    </>\n  )\n\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}