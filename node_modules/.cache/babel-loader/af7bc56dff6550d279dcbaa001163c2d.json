{"ast":null,"code":"var _jsxFileName = \"/Users/joshnguyen/Documents/Development/tradeRev/traderev/src/components/grid.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useImageHook from '../hooks/imageHook';\nimport ImageTile from './imageTile';\nimport { getImages } from '../Api';\nimport FullscreenImage from './fullscreenImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledGridContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n`;\n_c = StyledGridContainer;\nconst StyledGrid = styled.div`\nwidth: 100%;\n@media screen and (min-width: 1000px) {\n  width: 1200px;\n  margin: 0 auto;\n}\n`;\n_c2 = StyledGrid;\nconst LoadingComponent = styled.div`\n  font-weight: bold;\n  font-size: 50px'\n`;\n_c3 = LoadingComponent;\n\nconst Grid = () => {\n  _s();\n\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showFullscreen, setShowFullscreen] = useState(false);\n  const [fullscreenImageObject, setFullscreenImageObject] = useState();\n  const {\n    init,\n    imageObjects,\n    getImageObjects\n  } = useImageHook();\n  useEffect(() => {\n    if (hasInitialized && imageObjects.length) setImages(imageObjects);\n  }, [hasInitialized, imageObjects]);\n  useEffect(() => {\n    if (!hasInitialized) {\n      init();\n      setHasInitialized(true);\n    }\n  }, [hasInitialized]);\n\n  const handleGetImages = async () => {\n    const newImages = await getImages(currentPage);\n    console.log('-- IMAGES;', images);\n    setImages(images.concat(newImages));\n  };\n\n  const handleScroll = e => {\n    const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n\n    if (bottom) {\n      handleGetImages;\n    }\n  };\n\n  const handleShowFullscreenImage = imageObj => {\n    setFullscreenImageObject(imageObj);\n    setShowFullscreen(true);\n  };\n\n  const handleCloseFullscreenImage = () => {\n    setShowFullscreen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledGridContainer, {\n    onScroll: handleScroll,\n    children: [/*#__PURE__*/_jsxDEV(StyledGrid, {\n      children: images.map(image => /*#__PURE__*/_jsxDEV(ImageTile, {\n        imageData: image,\n        onClick: handleShowFullscreenImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingComponent, {\n      children: \"...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }, this), showFullscreen && /*#__PURE__*/_jsxDEV(FullscreenImage, {\n      imageData: fullscreenImageObject,\n      onClose: handleCloseFullscreenImage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Grid, \"+bMMAYMiRq2cH9W9dIIRHiZIRJs=\", false, function () {\n  return [useImageHook];\n});\n\n_c4 = Grid;\nexport default Grid;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledGridContainer\");\n$RefreshReg$(_c2, \"StyledGrid\");\n$RefreshReg$(_c3, \"LoadingComponent\");\n$RefreshReg$(_c4, \"Grid\");","map":{"version":3,"sources":["/Users/joshnguyen/Documents/Development/tradeRev/traderev/src/components/grid.jsx"],"names":["React","useEffect","useState","styled","useImageHook","ImageTile","getImages","FullscreenImage","StyledGridContainer","div","StyledGrid","LoadingComponent","Grid","images","setImages","currentPage","setCurrentPage","hasInitialized","setHasInitialized","showFullscreen","setShowFullscreen","fullscreenImageObject","setFullscreenImageObject","init","imageObjects","getImageObjects","length","handleGetImages","newImages","console","log","concat","handleScroll","e","bottom","target","scrollHeight","scrollTop","clientHeight","handleShowFullscreenImage","imageObj","handleCloseFullscreenImage","map","image","isLoading"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport useImageHook from '../hooks/imageHook';\nimport ImageTile from './imageTile';\nimport {getImages} from '../Api';\nimport FullscreenImage from './fullscreenImage';\n\nconst StyledGridContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n`;\n\nconst StyledGrid = styled.div`\nwidth: 100%;\n@media screen and (min-width: 1000px) {\n  width: 1200px;\n  margin: 0 auto;\n}\n`;\n\nconst LoadingComponent = styled.div`\n  font-weight: bold;\n  font-size: 50px'\n`;\n\nconst Grid = () => {\n  const [images, setImages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [hasInitialized, setHasInitialized] = useState(false);\n  const [showFullscreen, setShowFullscreen] = useState(false);\n  const [fullscreenImageObject, setFullscreenImageObject] = useState();\n\n  const { init, imageObjects, getImageObjects } = useImageHook();\n\n  useEffect(() => {\n    if (hasInitialized && imageObjects.length) setImages(imageObjects);\n  }, [hasInitialized, imageObjects]);\n\n  useEffect(() => {\n    if (!hasInitialized) {\n      init();\n      setHasInitialized(true);\n    }\n  }, [hasInitialized]);\n\n\n  const handleGetImages = async () => {\n    const newImages = await getImages(currentPage);\n    console.log('-- IMAGES;', images)\n    setImages(images.concat(newImages));\n  }\n\n  const handleScroll = (e) => {\n    const bottom = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n\n    if (bottom) {\n      handleGetImages\n    }\n  }\n\n  const handleShowFullscreenImage = (imageObj) => {\n    setFullscreenImageObject(imageObj);\n    setShowFullscreen(true);\n  }\n\n  const handleCloseFullscreenImage = () => {\n    setShowFullscreen(false);\n  }\n\n  return (\n    <StyledGridContainer onScroll={handleScroll}>\n      <StyledGrid>\n        {images.map(image => <ImageTile imageData={image} onClick={handleShowFullscreenImage} />)}\n      </StyledGrid>\n      {isLoading && <LoadingComponent>...</LoadingComponent>}\n      {showFullscreen && <FullscreenImage imageData={fullscreenImageObject} onClose={handleCloseFullscreenImage} />}\n    </StyledGridContainer>\n  )\n\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}